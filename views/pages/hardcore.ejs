<!DOCTYPE html>
<html lang="en">

<head>
        <% include ../partials/head %>
    <link rel="stylesheet" href="public/game.css" type="text/css">
</head>

<body>
    <%- include('../partials/nav', { active: 'hardscore' }) %>

    <canvas id="game" width="400" height="400"></canvas>
</body>

<script>
	function post(path, parameters) {
    var form = $('<form></form>');

    form.attr("method", "post");
    form.attr("action", path);

    $.each(parameters, function(key, value) {
        var field = $('<input></input>');

        field.attr("type", "hidden");
        field.attr("name", key);
        field.attr("value", value);

        form.append(field);
    });

    // The form needs to be a part of the document in
    // order for us to be able to submit it.
    $(document.body).append(form);
    form.submit();
}
    class SnakeGame {
        constructor() {
            this.canvas = document.getElementById('game');
            this.context = this.canvas.getContext('2d');

            // eventlistener
            document.addEventListener('keydown', this.onKeyPress.bind(this));
        }

        init() {
            // die ersten werte die man benutzt
            this.positionX = this.positionY = 10;
            this.appleX = this.appleY = 5;
            this.tailSize = 5;
            this.trail = [];
            this.gridSize = this.tileCount = 20;
            this.velocityX = this.velocityY = 0;

            //spiel beginnt
            //  8 FPS
            this.timer = setInterval(this.loop.bind(this), 1000 / 30);
        }

        reset() {
            // anhalten
            clearInterval(this.timer);
            // reset
            this.init();
        }

        // Spielschleife
        loop() {
            // berechnen
            this.update();

            // zeichnen
            this.draw();
        }

        update() {
            // Postition Anfang und Ende der Schlange
            this.positionX += this.velocityX;
            this.positionY += this.velocityY;

            // Berührt Würfel den Rand? JA - dann andere seite rauskommen
            if (this.positionX < 0) {
                this.positionX = this.tileCount - 1;
            } else if (this.positionY < 0) {
                this.positionY = this.tileCount - 1;
            } else if (this.positionX > this.tileCount - 1) {
                this.positionX = 0;
            } else if (this.positionY > this.tileCount - 1) {
                this.positionY = 0;
            }

            // ob die Schlange sich selbst berührt
            this.trail.forEach(t => {
                if (this.positionX === t.positionX && this.positionY === t.positionY) {
                    // wenn ja - reset
			if(this.tailSize > 5) post('/update-hardscore', { hard: this.tailSize-5});
                    this.reset();
                }
            });

            // kopf anhängen , also neuer stein ist kopf
            this.trail.push({ positionX: this.positionX, positionY: this.positionY });

            // löschen des schwanzes
            while (this.trail.length > this.tailSize) {
                this.trail.shift();
            }

            // apfel gegessen?
            if (this.appleX === this.positionX && this.appleY === this.positionY) {
                // ja - vergrößer länge
                this.tailSize++;

                // neuen apfel erstellen.
                // random x y vom apfel erstellen
                this.appleX = Math.floor(Math.random() * this.tileCount);
                this.appleY = Math.floor(Math.random() * this.tileCount);
            }
        }

        // zeichnen
        draw() {
            // hintergrund
            this.context.fillStyle = 'black';
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);

            // score
            this.context.fillStyle = 'white';
            this.context.font = '20px Arial';
            this.context.fillText(this.tailSize - 5, 20, 40);

            // vierecke der Schlange definiert
            this.context.fillStyle = 'yellow';
            this.trail.forEach(t => {
                this.context.fillRect(t.positionX * this.gridSize, t.positionY * this.gridSize, this.gridSize - 5, this.gridSize - 5);
            });

            // apfel printen
            this.context.fillStyle = 'red';
            this.context.fillRect(this.appleX * this.gridSize, this.appleY * this.gridSize, this.gridSize - 5, this.gridSize - 5);
        }

        // keyupevents
        onKeyPress(e) {
            // linke pfeiltaste
            if (e.keyCode === 37 && this.velocityX !== 1) {
                this.velocityX = -1;
                this.velocityY = 0;
            }

            // oben pfeiltaste
            else if (e.keyCode === 38 && this.velocityY !== 1) {
                this.velocityX = 0;
                this.velocityY = -1;
            }

            // rechte pfeiltaste
            else if (e.keyCode === 39 && this.velocityX !== -1) {
                this.velocityX = 1;
                this.velocityY = 0;
            }

            // unten pfeiltaste
            if (e.keyCode === 40 && this.velocityY !== -1) {
                this.velocityX = 0
                this.velocityY = 1;
            }
        }
    }

    // neues Spiel
    const game = new SnakeGame();

    // wenn seite geladen wird, soll das Spiel starten
    window.onload = () => game.init();
</script>

</html>